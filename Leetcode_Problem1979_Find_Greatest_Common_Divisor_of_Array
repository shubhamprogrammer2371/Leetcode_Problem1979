int findGCD(int* nums, int numsSize) {
    int max = 0 , min = 1001 , gcd = 0;
    for( int i = 0 ; i < numsSize ; i++)
    {
        max = fmax(max,nums[i]);
        min = fmin(min,nums[i]);
    }
    for(int i = 1 ; (i <= max) && (i <= min); ++i)
        if(!(min % i) && !(max % i)) // Checks if i is factor of both integers
            gcd = i;
    return gcd;
}


--------------------------------------------------------------------------------------------------------------------------------------------------------------


int findGCD(int* nums, int numsSize) {
    int max = 0 , min = 1001 , temp;
    for( int i = 0 ; i < numsSize ; i++)
    {
        max = fmax(max,nums[i]);
        min = fmin(min,nums[i]);
    }
    while(1)
    {
        temp = max % min;
        if (!temp)
            break;
        else
        {
            max = min;
            min = temp;
        }
    }
    return min;
}


------------------------------------------------------------------------------------------------------------------------------------------------------------------


int divisor(int a,int b)
{
    return (!b) ? a : divisor(b,a % b);
}
int findGCD(int* nums, int numsSize){
    int min = nums[0] , max = 0;
    for(int i = 0 ; i < numsSize ; i++)
    {
        min = fmin(nums[i],min);
        max = fmax(nums[i],max);
    }
    return divisor(max,min);
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


int* comp(const void* a,const void* b)
{
    return *(int*)a - *(int*)b;  
}
int findGCD(int* nums, int numsSize){
    qsort(nums,numsSize,sizeof(int),comp);
    if(!(nums[numsSize-1])%(nums[0])) 
        return nums[0];
    for(int i = nums[0] ; i > 0 ; i--)
        if(!((nums[numsSize-1]) % i) && !((nums[0]) % i)) 
            return i;
    return 1;
}
